# -*- coding: utf-8 -*-
"""SacAdosNaif.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X8t6wZvbN0IXUKh_O6BEk_QTl3UnyEJO

**Dictionaire**
* Nom de l'objet
* Valeur de l'objet
* Masse de l'objet
"""

liste_objets=[{"nom":"A", "valeur":"16", "masse":"5"},{"nom":"B", "valeur":"22", "masse":"7"},{"nom":"C", "valeur":"12", "masse":"4"},{"nom":"D", "valeur":"8", "masse":"3"}]

"""**La fonction Ajout_Ratio():**
  Permet de calculer la l'utilité massique ui/mi et de le rajouter a notre dictionnaire 

"""

#on rajoute a notre liste_objets le ratio ui/mi
def Ajout_Ratio(liste_objets):
  for objet in liste_objets:
    objet["u_m"]=eval(objet["valeur"])/eval(objet["masse"])
  return liste_objets

l=Ajout_Ratio(liste_objets)

l

# Solution approchée - Algorithme glouton
def sacADos_naif(capacite, liste_objets):
  
    poids_total=0
    i=0
    Ajout_Ratio(liste_objets)
    #Trier la liste des objets selon l'utilité massique en utilisant la fonction sorted
    
    liste_objets_T = sorted(liste_objets, key=lambda x: x["u_m"])

    #Inverser la liste triée (ordre décroissant)
    liste_objets_T.reverse()


    Objets_selection = []
    poids_total = 0
    n= len(liste_objets_T)
    for i in range(n):
        if eval(liste_objets_T[i]["masse"]) + poids_total <= capacite:
          poids_total +=eval(liste_objets_T[i]["masse"])
          Objets_selection.append((liste_objets_T[i]["nom"]))
    return Objets_selection

L_Objets=sacADos_naif(14, liste_objets)
print(L_Objets)

